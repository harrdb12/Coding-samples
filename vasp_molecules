#!/usr/bin/env python

import sys
import numpy as np
import time

def transitive_closure(a):
    closure = set(a)
    while True:
        new_relations = set((x,w) for x,y in closure for q,w in closure if q == y)
        new_relations2= set((x,q) for x,y in closure for q,w in closure if y == w and q>x)
        closure_until_now = closure | new_relations | new_relations2

        if closure_until_now == closure:
            break

        closure = closure_until_now

    return closure

if ( len(sys.argv) == 2 ):
        readfile = sys.argv[1]
else:
        print '\n incorrect number of arguments \n'
	print 'correct usage: vasp_distances [POSCAR]'
        sys.exit()

data = open(readfile,'r')
lines = data.readlines()
data.close()

global basis
scalefactor = float(lines[1].split()[0]) 
basis = np.genfromtxt(readfile,skip_header=2,usecols=(0,1,2),max_rows=3,unpack=True)
basis = scalefactor*basis

if (lines[7].split())[0] == "Selective":
        coordstartline = 9
else:
        coordstartline = 8

direct = False
if (lines[coordstartline-1].split())[0] == "Direct":
	direct = True
	lines[coordstartline-1] = "Cartesian"

atoms = map(int, lines[6].split())
atomsymbol = lines[5].split()
numatoms = sum(atoms)
atomkey = []
for i in range(len(atoms)):
        for j in range(atoms[i]):
                atomkey.append(atomsymbol[i])

bigarray = np.genfromtxt(readfile,skip_header=coordstartline,usecols=(0,1,2),max_rows=numatoms,unpack=True)
splitarray = np.split(bigarray,numatoms,axis=1)
bonds_list = []
#Convert to cartesian coordinates for the rest of the setup
if direct:
	for i in range(numatoms):
                splitarray[i]=np.dot (basis, splitarray[i])

for i in range(numatoms):
        for j in range(i+1,numatoms):
                minimum =  np.linalg.norm(splitarray[i]-splitarray[j])
                temp = splitarray[i]
                for k in range(-1,2):
                        for l in range(-1,2):
                                for m in range(-1,2):
                                        if np.linalg.norm(temp+k*basis[:,[0]]+l*basis[:,[1]]+m*basis[:,[2]]-splitarray[j]) < minimum: 
                                                minimum = np.linalg.norm(temp+k*basis[:,[0]]+l*basis[:,[1]]+m*basis[:,[2]]-splitarray[j])
                if atomkey[i] == atomkey[j] == 'H':
                        if minimum < 1.0:
                                bonds_list.append((i,j))
                elif minimum < 1.6:
                        bonds_list.append((i,j))

unbonded_atoms = []
for i in range(numatoms):
        counter = 0
        for j in bonds_list:
                if i not in j:
                        counter = counter + 1
        if counter == len(bonds_list):
                unbonded_atoms.append(i)

for i in range(len(unbonded_atoms)):
        unbonded_atoms[i] = atomkey[unbonded_atoms[i]]

trans_list= sorted(transitive_closure(bonds_list))

length = len(trans_list)
i = 0
while i < length:
        j = i + 1
        while j < length:
                if trans_list[i][1] == trans_list[j][0]:
                        trans_list.pop(j)
                        length = length - 1
                else:
                        j = j + 1                
        i = i + 1

new_list = map(list,trans_list)
length = len(new_list)
i = 0
while i < length:
        j = i + 1
        while j < length:
                if new_list[i][0] == new_list[j][0]:
                        new_list[i].append(new_list[j][1])
                        new_list.pop(j)
                        length = length - 1
                else:
                        j = j + 1                
        i = i + 1

for i in range(len(new_list)):
        for j in range(len(new_list[i])):
                new_list[i][j] = atomkey[new_list[i][j]]

short_list = map(list,set(map(tuple,new_list)))
for temp_mol in short_list:
        for temp_atom in sorted(set(temp_mol)):
                sys.stdout.write(temp_atom)
                if temp_mol.count(temp_atom) != 1:
                        print temp_mol.count(temp_atom),
        print "\t", new_list.count(temp_mol)
for temp_atom in sorted(set(unbonded_atoms)):
        sys.stdout.write(temp_atom)
        print "\t", unbonded_atoms.count(temp_atom)
                   
#output = open("posc",'w')
#for l in new_list: 
#        output.write(" ".join(str(e) for e in l)+"\n")
#output.close()
